# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Bazel GMP Native on Windows, Linux and MacOS-OSX

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Git Submodules
      run: |
        git submodule update --init --recursive
        git pull --recurse-submodules
        cp WORKSPACE-native WORKSPACE

    - name: GMP Build Native (BASH-UBUNTU)
      if: contains(matrix.os, 'ubuntu')
      run: |
        echo "RUNNING SCRIPT ./gmp-install.sh"
        ./gmp-install.sh
      shell: bash

    - name: GMP Build Native (BASH-MACOS-OSX)
      if: contains(matrix.os, 'macos')
      run: |
        echo "RUNNING SCRIPT ./gmp-install.sh"
        ./gmp-install.sh
      shell: bash

    - name: GMP Build Native (CMD)
      if: contains(matrix.os, 'windows')
      run: |
        echo "RUNNING MANUAL BUILD"
        cd .\thirdparty\mpir\msvc\vs22\
        echo "building generic version"
        cmd /c msbuild.bat gc LIB x64 Release
        echo "FINISHED build in CMD!"
      shell: cmd

    - name: GMP Check Native Library (CMD)
      if: contains(matrix.os, 'windows')
      run: |
        echo "CHECKING lib type (EXPECTED LIBCMT or /MT)"
        echo "ls thirdparty\mpir"
        ls thirdparty\mpir
        echo "lib /list thirdparty\mpir\lib\x64\Release\mpir.lib"
        lib /list thirdparty\mpir\lib\x64\Release\mpir.lib
        echo "dumpbin /directives thirdparty\mpir\lib\x64\Release\mpir.lib"
        dumpbin /directives thirdparty\mpir\lib\x64\Release\mpir.lib
        echo "FINISHED build in CMD!"
      shell: cmd


    - name: Get python dependencies
      shell: bash
      run: |
        python3 -m pip install conan
    - name: Get bazel (WINDOWS)
      if: contains(matrix.os, 'windows')
      shell: bash
      run: |
        choco install bazelisk
    - name: Get bazel (MACOS)
      if: contains(matrix.os, 'macos')
      shell: bash
      run: |
        brew install bazelisk
    - name: Get bazel (LINUX)
      if: contains(matrix.os, 'ubuntu')
      shell: bash
      run: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
        bash -i -c "nvm install --lts"
        bash -i -c "sudo npm install -g @bazel/bazelisk"

    - name: Build (WINDOWS)
      if: contains(matrix.os, 'windows')
      run: bazel build ... --config windows_mt

    - name: Build (LINUX)
      if: contains(matrix.os, 'ubuntu')
      run: bazel build ... --config linux_${{ matrix.c_compiler }}

    - name: Build (OSX-MACOS)
      if: contains(matrix.os, 'macos')
      run: bazel build ... --config linux_${{ matrix.c_compiler }}

    - name: Test (WINDOWS)
      if: contains(matrix.os, 'windows')
      run: bazel test ... --config windows_mt

    - name: Test (LINUX)
      if: contains(matrix.os, 'ubuntu')
      run: bazel test ... --config linux_${{ matrix.c_compiler }}

    - name: Test (OSX-Macos)
      if: contains(matrix.os, 'macos')
      run: bazel test ... --config linux_${{ matrix.c_compiler }}
